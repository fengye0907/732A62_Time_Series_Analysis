knitr::opts_chunk$set(echo = TRUE, out.height = "250px")
library(latex2exp)
library(tseries)
library(MASS)
library(astsa)
library(ggplot2)
library(birk)
rm(list=ls())
set.seed(12345)
library(latex2exp)
library(tseries)
library(MASS)
library(astsa)
library(ggplot2)
library(birk)
rm(list=ls())
set.seed(12345)
# filter0 <- function(xs){
#   vs <- c()
#   for (i in 5:length(xs)) {
#     vs <- c(vs, 0.2*(xs[i]+xs[i-1]+xs[i-2]+xs[i-3]+xs[i-4]))
#   }
#   vs
# }
xs1 <- c(0, 0)
n   <- 100
ws  <- rnorm(n)
for (i in 3:n) {
xs1 <- c(xs1, -0.8*xs1[i-2] + ws[i])
}
vs1 <-stats::filter(xs1, filter = rep(0.2, 5))
xs2 <- c()
for (i in 1:n) {
xs2 <- c(xs2, cos((2*pi*i)/5))
}
vs2 <- stats::filter(xs2, filter = rep(0.2, 5))
par(mfrow=c(2,1))
plot(xs1,type="l", ylab = TeX("$x_t=-0.8x_{t-2}+w_t$"), xlab="t")
lines(vs1, col="red")
plot(xs2,type="l", ylab = TeX("$x_t=\\cos(2\\pi t/5)$"), xlab="t")
lines(vs2, col="red")
# Causality
z <- c(1,4,-2,0,0,-1)
root <- polyroot(z)
abs(root)>1
# Invertibility
z <- c(1,0,3,0,1,0,-4)
root <- polyroot(z)
abs(root)>1
set.seed(54321)
# sample ACF
sim <- arima.sim(n=100, model=list(ar=c(1, -3/4), ma=c(1,0,-1/9)))
acf.sim <- acf(sim, plot = F)
# theoretical ACF
acf.thm <- ARMAacf(ar=c(1, -3/4), ma=c(1,0,-1/9), lag.max = 21)
plot(acf.sim$acf, type="l", ylim=c(-1,1), col="blue", xlab="lag", ylab="ACF")
lines(acf.thm, col="red")
legend(16,0.8,legend=c("sim","thm"), col=c("red","blue"),lty=1)
rm(list=ls())
rhine <- read.csv2("Rhine.csv")
knitr::opts_chunk$set(echo = TRUE, out.height = "250px")
library(latex2exp)
library(tseries)
library(MASS)
library(astsa)
library(ggplot2)
library(birk)
rm(list=ls())
set.seed(12345)
# filter0 <- function(xs){
#   vs <- c()
#   for (i in 5:length(xs)) {
#     vs <- c(vs, 0.2*(xs[i]+xs[i-1]+xs[i-2]+xs[i-3]+xs[i-4]))
#   }
#   vs
# }
xs1 <- c(0, 0)
n   <- 100
ws  <- rnorm(n)
for (i in 3:n) {
xs1 <- c(xs1, -0.8*xs1[i-2] + ws[i])
}
vs1 <-stats::filter(xs1, filter = rep(0.2, 5))
xs2 <- c()
for (i in 1:n) {
xs2 <- c(xs2, cos((2*pi*i)/5))
}
vs2 <- stats::filter(xs2, filter = rep(0.2, 5))
par(mfrow=c(2,1))
plot(xs1,type="l", ylab = TeX("$x_t=-0.8x_{t-2}+w_t$"), xlab="t")
lines(vs1, col="red")
plot(xs2,type="l", ylab = TeX("$x_t=\\cos(2\\pi t/5)$"), xlab="t")
lines(vs2, col="red")
# Causality
z <- c(1,4,-2,0,0,-1)
root <- polyroot(z)
abs(root)>1
# Invertibility
z <- c(1,0,3,0,1,0,-4)
root <- polyroot(z)
abs(root)>1
set.seed(54321)
# sample ACF
sim <- arima.sim(n=100, model=list(ar=c(1, -3/4), ma=c(1,0,-1/9)))
acf.sim <- acf(sim, plot = F)
# theoretical ACF
acf.thm <- ARMAacf(ar=c(1, -3/4), ma=c(1,0,-1/9), lag.max = 21)
plot(acf.sim$acf, type="l", ylim=c(-1,1), col="blue", xlab="lag", ylab="ACF")
lines(acf.thm, col="red")
legend(16,0.8,legend=c("sim","thm"), col=c("red","blue"),lty=1)
rm(list=ls())
rhine <- read.csv2("Rhine.csv")
ts0 <- ts(rhine)
plot(ts0, main="time series")
lag.plot(ts0[,4], lag=12)
mdl <- lm(TotN_conc~Time, rhine)
plot(rhine$Time, rhine$TotN_conc, xlab="Time", ylab="concentrations", main = "linear regression")
lines(rhine$Time,mdl$fitted.values, col="red")
legend(2000,7, legend = c("Time series" , "Linear Model"),
col = c("black","red"),lty = 1, cex=0.8)
r <- mdl$residuals
plot(y=r,x=rhine$Time, type="l", xlab="t", ylab = "residual", main = "linear regression")
acf(r)
# fit kernel smoother
# choose a reasonable bandwidth yourself
bandwidth_values = seq(from = 0.2, to = 1, by = 0.001)
# fit kernel smoother with different bandwidth_values
# save the values in matrix with a row for residuals and columns for bandwidth values
residuals = vector("numeric", length = length(bandwidth_values))
counter = 0
for (i in bandwidth_values) {
counter  = counter +1
# fit the smoother
kernel_model = ksmooth(x = rhine[,3], y = rhine[,4], # x = time & y = nitrogen
bandwidth = i)
# compute the residuals
residuals[counter] = sum(rhine[,4] - kernel_model$y)
}
# find best residuals
best_bandwidth_index = which.closest(residuals, 0)
best_bandwidth_value = bandwidth_values[best_bandwidth_index]
# fit the best kernel_model
kernel_model_best = ksmooth(x = rhine[,3], y = rhine[,4], # x = time & y = nitrogen
bandwidth = best_bandwidth_value)
# fit a bad bandwidth value
kernel_model_worst = ksmooth(x = rhine[,3], y = rhine[,4], # x = time & y = nitrogen
bandwidth = 1)
best_bandwidth_value
# plot of smoother
plot(rhine[,3], rhine[,4],
main = "Kernel smoother",
xlab = "time", ylab = "nitrogen")
lines(x = kernel_model_best$x, y = kernel_model_best$y,
col = "green")
lines(x = kernel_model_worst$x, y = kernel_model_worst$y,
col = "blue")
legend(1999, 7.5, legend = c("Time Series", "Best - Smoother", "Smoother =  1"),
col = c("black", "green", "blue"),
lty = 1, cex = 0.7)
r2 <- kernel_model_best$y-rhine$TotN_conc
plot(y=r2, x=rhine$Time, type="l", xlab="t", ylab="residual", main = "kernel smoother bw=0.334")
acf(r2)
# data <- cbind(rhine[,3], matrix(0, nrow = nrow(rhine), ncol = 11))
# for (i in 1:nrow(rhine)) {
#   j <- rhine[i,2] # month
#   if(j>1){
#     data[i, j] <- 1
#   }
# }
# data <- cbind(1,data)
#
# p<- solve((t(data)%*%data),tol=4e-25)%*%t(data)%*%rhine$TotN_conc
# y.pred <- data%*%p
data <- cbind(rhine[,3], matrix(0, nrow = nrow(rhine), ncol = 11))
for (i in 1:nrow(rhine)) {
j <- rhine[i,2] # month
if(j>1){
data[i, j] <- 1
}
}
data <- as.data.frame(cbind(data, rhine$TotN_conc))
colnames(data) <- c("a1","b2","b3","b4","b5",
"b6","b7","b8","b9","b10","b11","b12","TotN_conc")
mdl2 <- lm(TotN_conc~.,data)
plot(rhine$Time, rhine$TotN_conc, xlab="Time", ylab="concentrations", main="seasonal mean model")
lines(rhine$Time,mdl2$fitted.values, col="red")
legend(1998,7, legend = c("Time series" , "seasonal-mean Model"),
col = c("black","red"),lty = 1, cex=0.8)
r3 <- mdl2$fitted.values-rhine$TotN_conc
plot(y=r3, x=rhine$Time, type="l", xlab="t", ylab="residual", main = "seasonal mean model")
acf(r3)
set.seed(54321)
step.model <- MASS::stepAIC(mdl2, trace = 1)
step.model
data(oil)
data(gas)
graphics::plot(oil, col="blue",type="l",ylab="p", ylim=c(0,350))
graphics::lines(gas, col="red")
graphics::legend(2000,300, legend = c("Gas" , "Oil"),
col = c("red","blue"),lty = 1, cex=0.8)
d1 <- log(oil)
d2 <- log(gas)
graphics::plot(d1, col="blue",type="l",ylab="log(p)", ylim=c(3,6))
graphics::lines(d2, col="red")
graphics::legend(2000,5.5, legend = c("Gas" , "Oil"),
col = c("red","blue"),lty = 1, cex=0.8)
xt <- diff(d1, lag=1)
yt <- diff(d2, lag=1)
plot(xt, col="blue",type="l",ylab=TeX("$\\nabla\\log(p)$"),ylim=c(-0.3,0.4))
lines(yt, col="red")
graphics::legend(2000,0.3, legend = c("Gas" , "Oil"),
col = c("red","blue"),lty = 1, cex=0.8)
acf(xt)
acf(yt)
ggplot(data.frame(xt=xt, yt=yt), aes(x=xt, y=yt)) +
geom_point() +
stat_smooth(method="loess", color="Blue") +
ggtitle(TeX("x_t vs y_{t}"))
