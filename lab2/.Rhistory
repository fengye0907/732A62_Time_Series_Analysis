cat("Number of points outsides the 95% prediction interval:",out,"\n")
par(mfrow=c(2,1))
plot(ARMAacf(ma = c(0.3,rep(0,9),0.6, 0.3*0.6)), type="h",
main="Theoretical", xlab="lag",ylab="ACF"); abline(h=0)
plot(ARMAacf(ma = c(0.3,rep(0,9),0.6, 0.3*0.6), pacf=TRUE),
type="h", xlab="lag",ylab="PACF"); abline(h=0)
par(mfrow=c(2,1))
plot(ARMAacf(ma = c(0.3,rep(0,9),0.6, 0.3*0.6)), type="h",
main="Theoretical", xlab="lag",ylab="ACF"); abline(h=0)
plot(ARMAacf(ma = c(0.3,rep(0,9),0.6, 0.3*0.6)[-1], pacf=TRUE),
type="h", xlab="lag",ylab="PACF"); abline(h=0)
par(mfrow=c(2,1))
plot(ARMAacf(ma = c(0.3,rep(0,9),0.6, 0.3*0.6)), type="h",
main="Theoretical", xlab="lag",ylab="ACF"); abline(h=0)
plot(ARMAacf(ma = c(0.3,rep(0,9),0.6, 0.3*0.6), pacf=TRUE),
type="h", xlab="lag",ylab="PACF"); abline(h=0)
?ARMAacf
par(mfrow=c(2,1))
plot(ARMAacf(ma = c(0.3,rep(0,9),0.6, 0.3*0.6), pacf=FALSE),
type="h",xlab="lag",ylab="ACF",main="Theoretical",); abline(h=0)
plot(ARMAacf(ma = c(0.3,rep(0,9),0.6, 0.3*0.6), pacf=TRUE),
type="h",xlab="lag",ylab="PACF"); abline(h=0)
class(sim_1c)
# generate seasonal ARIMA(0,0,1)*(0,0,1)_12
sim_1c <- as.numeric(arima.sim(list(order = c(0,0,13), ma = c(0.3,rep(0,10),0.6, 0.3*0.6)), n = 200))
plot(sim_1c, type="l")
p <- acf2(sim_1c)
par(mfrow=c(2,1))
plot(ARMAacf(ma = c(0.3,rep(0,9),0.6, 0.3*0.6), pacf=FALSE),
type="h",xlab="lag",ylab="ACF",main="Theoretical",); abline(h=0)
plot(ARMAacf(ma = c(0.3,rep(0,9),0.6, 0.3*0.6), pacf=TRUE),
type="h",xlab="lag",ylab="PACF"); abline(h=0)
p <- acf2(sim_1c, lag.max=15)
?acf2
p <- acf2(sim_1c, max.lag=15)
p <- acf2(sim_1c, max.lag=14)
plot(ARMAacf(ma = c(0.3,rep(0,9),0.6, 0.3*0.6), pacf=FALSE),
type="h",xlab="lag",ylab="ACF",main="Theoretical",); abline(h=0)
plot(ARMAacf(ma = c(0.3,rep(0,9),0.6, 0.3*0.6), pacf=TRUE),
type="h",xlab="lag",ylab="PACF"); abline(h=0)
set.seed(123456)
# generate seasonal ARIMA(0,0,1)*(0,0,1)_12
sim_1c <- arima.sim(list(order = c(0,0,13), ma = c(0.3,rep(0,10),0.6, 0.3*0.6)), n = 200)
plot(sim_1c, type="l")
p <- acf2(sim_1c, max.lag=14)
par(mfrow=c(2,1))
plot(ARMAacf(ma = c(0.3,rep(0,9),0.6, 0.3*0.6), pacf=FALSE),
type="h",xlab="lag",ylab="ACF",main="Theoretical",); abline(h=0)
plot(ARMAacf(ma = c(0.3,rep(0,9),0.6, 0.3*0.6), pacf=TRUE),
type="h",xlab="lag",ylab="PACF"); abline(h=0)
set.seed(12345)
rm(list = ls())
data(oil)
data <- oil
# original
plot(data, main = "Oil Price")
### transform
# log for narrow the variance
# diff for stationary removal
data_diff = diff(log(data))
plot(data_diff,  main = "Oil Price logged & difference") # looks stationary
# unit root test
adf.test(data_diff)
# Box-Ljung test
Box.test(data_diff, type="Ljung-Box")
# ACF and PACF plots: acf2
p <- acf2(as.numeric(data_diff))
# EACF analysis
eacf(data_diff, ma.max = 6) # arma(3,3)
# Q-Q plots
qqnorm(data_diff, pch = 1, frame = FALSE)
qqline(data_diff, col = "steelblue", lwd = 2)
# Q-Q plots
qqnorm(data_diff, pch = 1, frame = FALSE)
qqline(data_diff, col = "steelblue", lwd = 2)
# ACF and PACF plots: acf2
p <- acf2(as.numeric(data_diff))
# EACF analysis
# choose a circle locating on dignal
# The model should be as simple as it can be
eacf(data_diff, ma.max = 6)
# ARIMA fit analysis
# model 1
fit1 = arima(x = data_diff, c(3,0,3))
# model 2
fit2 = arima(x = data_diff, c(1,0,1))
hist(fit1$residuals, breaks=30)
rug(fit1$residuals)
hist(fit2$residuals, breaks=30)
rug(fit2$residuals)
runs(fit1$residuals)
?reuns
?runs
# ARIMA fit analysis
# model 1 & 2
fit1 = arima(x = data_diff, c(3,0,3))
fit2 = arima(x = data_diff, c(1,0,1))
hist(fit1$residuals, breaks=30)
rug(fit1$residuals)
hist(fit2$residuals, breaks=30)
rug(fit2$residuals)
###### choose one of the model
best_fit <- fit2
# predictions
fore <- forecast(data_diff, 20, model=fit2)
plot(fore,xlim=c(2005, 2011))
fore2 <- exp(cumsum(c(data_diff, as.data.frame(fore)[,1])))
plot(fore,xlim=c(2005, 2011))
fore <- forecast(data_diff, 20, model=arima(x = data, c(1,1,1))
)
plot(fore <- forecast(data_diff, 20, model=arima(x = data, c(1,1,1))
))
plot(fore <- forecast(data, 20, model=arima(x = data, c(1,1,1))
))
###### choose one of the model
best_fit <- arima(x=log(data), c(1,1,1))
# predictions
fore <- forecast(data, 20, model=best_fit)
plot(fore,xlim=c(2005, 2011))
###### choose one of the model
best_fit <- arima(x=data, c(1,1,1))
# predictions
fore <- forecast(data, 20, model=best_fit)
plot(fore,xlim=c(2005, 2011))
###### choose one of the model
best_fit <- arima(x=data, c(1,1,1))
# predictions
fore <- forecast(data, 20, model=best_fit)
plot(fore,xlim=c(2005, 2011), ylab="Oil price")
auto.arima(data, seasonal = F)
auto.arima(data_diff, seasonal = F)
auto.arima(log(data), seasonal = F)
best_fit <- arima(x=log(data), c(1,1,1))
# predictions
fore <- forecast(log(data), 20, model=best_fit)
plot(fore,xlim=c(2005, 2011), ylab="logged Oil price")
###### choose one of the model
best_fit <- arima(x=data, c(1,1,1))
# predictions
fore <- forecast(data, 20, model=best_fit)
plot(fore,xlim=c(2005, 2011), ylab="Oil price")
###### choose one of the model
best_fit <- arima(x=log(data), c(1,1,1))
# predictions
fore <- forecast(log(data), 20, model=best_fit)
plot(fore,xlim=c(2005, 2011), ylab="logged Oil price")
# predictions
fore <- forecast(log(data), 20, model=auto.arima(log(data)))
# predictions
fore <- forecast(log(data), 20, model=auto.arima(log(data), seasonal = F))
plot(fore,xlim=c(2005, 2011), ylab="logged Oil price")
rm(list=ls())
data(unemp)
data = unemp
### visualisation of original plot
plot(data, main = "original unemp")
### transform -- log
data_log <- log(data)
plot(data_log,  main = "logged unemp")
# evidently seasonal
plot(decompose(data_log))
### transform -- log
data_log <- log(data)
# evidently seasonal
plot(decompose(data_log),main = "logged unemp")
# evidently seasonal
plot(decompose(data_log))
data_log_diff = diff(data_log, lag = 12)
plot(data_log_diff, main="remove seasonality")
# first difference -- increment
data_log_ddiff = diff(data_log_diff, lag = 1)
plot(data_log_ddiff)
acf(data_log_ddiff, lag.max = 120)
pacf(data_log_ddiff, lag.max = 120)
# first difference -- increment
data_log_ddiff = diff(data_log_diff, lag = 2)
plot(data_log_ddiff)
acf(data_log_ddiff, lag.max = 120)
pacf(data_log_ddiff, lag.max = 120)
# first difference -- increment
data_log_ddiff = diff(data_log_diff, lag = 1)
plot(data_log_ddiff)
acf(data_log_ddiff, lag.max = 120)
pacf(data_log_ddiff, lag.max = 120)
# first difference -- increment
data_log_ddiff = diff(data_log_diff, lag = 1)
plot(data_log_ddiff) # seems stationary
# unit root test
adf.test(data_diff)
# first difference -- increment
data_log_ddiff = diff(data_log_diff, lag = 1)
plot(data_log_ddiff) # seems stationary
# unit root test
adf.test(data_ddiff)
# first difference -- increment
data_log_ddiff = diff(data_log_diff, lag = 1)
plot(data_log_ddiff) # seems stationary
# unit root test
adf.test(data_log_ddiff)
# Box-Ljung test
Box.test(data_log_ddiff, type="Ljung-Box")
adf.test(data_log_diff)
# Box-Ljung test
Box.test(data_log_diff, type="Ljung-Box")
p <- acf2(data_log_diff)
p <- acf2(data_log)
p<- acf2(data_log_ddiff)
data_log_diff = diff(data_log, lag = 12)
plot(data_log_diff, main="remove seasonality")
p <- acf2(data_log_diff)
# first difference -- increment
data_log_ddiff = diff(data_log_diff, lag = 12)
p<- acf2(data_log_ddiff)
data_log_diff = diff(data_log, lag = 12)
plot(data_log_diff, main="remove seasonality")
p <- acf2(data_log_diff)
auto.arima(data_log_diff)
# first difference -- increment
data_log_ddiff = diff(data_log_diff, lag = 1)
plot(data_log_ddiff)
p<- acf2(data_log_ddiff)
data_log_diff = diff(data_log, lag = 12)
plot(data_log_diff, main="remove seasonality")
p <- acf2(data_log_diff)
# unit root test
adf.test(data_log_diff)
# Box-Ljung test
Box.test(data_log_diff, type="Ljung-Box")
eacf(data_log_diff)
data_log_diff = diff(data_log, lag = 12)
plot(data_log_diff, main="remove seasonality")
p <- acf2(data_log_diff)
# Q-Q plot
qqnorm(data_log_diff, pch = 1, frame = FALSE)
qqline(data_log_diff, col = "steelblue", lwd = 2)
# unit root test
adf.test(data_log_diff)
# Box-Ljung test
Box.test(data_log_diff, type="Ljung-Box")
?sarima
p <- acf2(data_log)
data_log_diff = diff(data_log, lag = 12)
plot(data_log_diff, main="remove seasonality")
p <- acf2(data_log_diff)
# Q-Q plot
qqnorm(data_log_diff, pch = 1, frame = FALSE)
qqline(data_log_diff, col = "steelblue", lwd = 2)
# unit root test
adf.test(data_log_diff)
# Box-Ljung test
Box.test(data_log_diff, type="Ljung-Box")
# fit and forecast
fit1 <- sarima(data_log_diff,p=3,d=0,q=1,P=1,S=12,details = FALSE)
fit2 <- sarima(data_log_diff,p=2,d=0,q=1,P=1,S=12,details = FALSE)
fit1$fit
fit2$fit  # bigger log-llk, smaller aic
?sarima.for
sarima.for(data_log_diff, 20,3,0,1,1,0,0,12)
###### choose one of the model
best_fit <- arima(x=data_diff, c(1,0,1))
knitr::opts_chunk$set(echo = TRUE, out.height = "230px")
library(astsa)
library(kernlab)
library(latex2exp)
library(kableExtra)
library(forecast)
library(TSA)
library(tseries)
rm(list=ls())
set.seed(12345)
# the simulation of ar(3) process
sim <- arima.sim(list(ar=c(0.8,-0.2,0.1)), n=1000)
# create lag data.frame
dat <-ts.intersect(x0=sim, x1=lag(sim,-1), x2=lag(sim,-2),
x3=lag(sim,-3), dframe = T)
# create the potiential linear relation among nearby observations
res1 <- lm(x0~x1+x2, data=dat)
res2 <- lm(x3~x2+x1, data=dat)
# the estimation of noise
r1 <- residuals(res1)
r2 <- residuals(res2)
cor(r1, r2)
pacf(sim, lag.max = 33, main = "simulation of AR(3)")
ARMAtoAR(c(0.8,-0.2,0.1), lag.max = 33)[33]
# Simulate an AR(2) process
set.seed(12345)
ar_sim2 = arima.sim(model = list(ar = c(0.8, 0.1)), n = 100)
# method of moments (Yule-Walker equations)
yw = ar(ar_sim2, order = 2,
method = c("yule-walker"),
aic = FALSE)
# - conditional least squares
cls = ar(ar_sim2, order = 2,
method = c("ols"),
aic = FALSE)
# - maximum likelihood (MLE)
ml = ar(ar_sim2, order = 2,
method = c("mle"),
aic = FALSE)
# compare results to the true values
# - true values are given
matrix_a1_b = matrix(c(0.8,yw$ar[1],cls$ar[1],ml$ar[1],
0.1,yw$ar[2],cls$ar[2],ml$ar[2]),
ncol = 2, nrow = 4)
df_a1_b = as.data.frame(matrix_a1_b,
row.names = c("True",
"Yule-Walker",
"conditional least squares",
"maximum likelihood "),
col.names = c("phi1", "phi2"))
df_a1_b = round(df_a1_b,3)
kable(df_a1_b) %>%
kable_styling(latex_options="basic")
# The asymptotic-theory variance matrix of the coefficient estimates
name <- c("phi1", "phi2")
mat <- as.data.frame(ml$asy.var.coef, row.names = name, col.names = name)
kable(mat) %>%
kable_styling(latex_options="basic")
va <- ml$asy.var.coef[2,2]
va
sd <- sqrt(va)
int <- 1.96*sd/sqrt(100)
sd
cat(c(ml$ar[2]-int, ml$ar[2]+int))
set.seed(123456)
# generate seasonal ARIMA(0,0,1)*(0,0,1)_12
sim_1c <- arima.sim(list(order = c(0,0,13), ma = c(0.3,rep(0,10),0.6, 0.3*0.6)), n = 200)
plot(sim_1c, type="l")
p <- acf2(sim_1c, max.lag=14)
par(mfrow=c(2,1))
plot(ARMAacf(ma = c(0.3,rep(0,9),0.6, 0.3*0.6), pacf=FALSE),
type="h",xlab="lag",ylab="ACF",main="Theoretical",); abline(h=0)
plot(ARMAacf(ma = c(0.3,rep(0,9),0.6, 0.3*0.6), pacf=TRUE),
type="h",xlab="lag",ylab="PACF"); abline(h=0)
fit <- sarima(sim_1c, p=0, d=0, q=1, Q=1, S=12)
sarima.for(sim_1c, 30, 0, 0, 1, Q=1, S=12)
fit2 <- gausspr(x=1:200, y=sim_1c)
plot(1:200, sim_1c, type="l", xlim=c(1,230))
lines(x=1:230, y=predict(fit2, 1:230)[,1], col = "steelblue", lwd=2)
set.seed(12345)
sim_1e <- arima.sim(list(ar=0.7, ma=0.5), 50)
sample <- sim_1e[1:40]
fit40  <- auto.arima(sample, max.p = 1, max.q = 1,
allowmean = TRUE)      # zero-mean
fore <- forecast(fit40, 10)
plot(fore)
lines(sim_1e,type="b")
dt <- cbind(sim_1e[41:50], fore$lower[,2], fore$upper[,2])
out <- 0
for(i in 1:10){
if(!dt[i,1]>dt[i,2]&&dt[i,1]<dt[i,3]){
out <- out+1
}
}
cat("Number of points outsides the 95% prediction interval:",out,"\n")
set.seed(12345)
rm(list = ls())
# get all the data
# chicken, so2, EQcount, HCT
data(chicken)
data(so2)
data(EQcount)
data(HCT)
plot_function = function(data,lag_dif){
# data: the data - as time series object
# lag_dif: the lag difference
par(mfrow = c(2,2))
# not lagged data
acf_obj = acf(data)
pacf_obj = pacf(data)
# the lagged data
acf_obj_lag = acf(diff(data), lag.max = lag_dif)
pacf_obj_lag = pacf(diff(data), lag.max = lag_dif)
}
plot(chicken, main = "Chicken price")
plot_function(chicken, 40)
plot(so2, main = "Sulfur dioxide levels")
plot_function(so2, 40)
plot(EQcount, main = "Aannual counts of major earthquakes")
plot_function(EQcount, 40)
plot(HCT, main = "Hematocrit Levels")
plot_function(HCT, 40)
set.seed(12345)
rm(list = ls())
data(oil)
data <- oil
# original
plot(data, main = "Oil Price")
### transform
# log for narrow the variance
# diff for stationary removal
data_diff = diff(log(data))
plot(data_diff,  main = "Oil Price logged & difference")
# looks stationary
# unit root test
adf.test(data_diff)
# Box-Ljung test
Box.test(data_diff, type="Ljung-Box")
# Q-Q plots
qqnorm(data_diff, pch = 1, frame = FALSE)
qqline(data_diff, col = "steelblue", lwd = 2)
# ACF and PACF plots: acf2
p <- acf2(as.numeric(data_diff))
# EACF analysis
# choose a circle locating on dignal
# The model should be as simple as it can be
eacf(data_diff, ma.max = 6)
# ARIMA fit analysis
# model 1 & 2
fit1 = arima(x = data_diff, c(3,0,3))
fit2 = arima(x = data_diff, c(1,0,1))
hist(fit1$residuals, breaks=30)
rug(fit1$residuals)
hist(fit2$residuals, breaks=30)
rug(fit2$residuals)
###### choose one of the model
best_fit <- arima(x=data_diff, c(1,0,1))
# predictions
fore <- forecast(data_diff, 20, model=best_fit)
plot(fore,xlim=c(2005, 2011))
INSTA
install.packages("xcolor")
ARMAtoMA(ar=c(0.4,0.45),ma=(1,0.25))
ARMAtoMA(ar=c(0.4,0.45),ma=c(1,0.25))
ARMAtoMA(ar=c(0.4,0.45),ma=c(1,0.25),10)
ARMAtoMA(ar=c(1,0.4,0.45),ma=c(1,1,0.25),10)
ARMAtoMA(ar=c(1,0.4),10)
ARMAtoMA(ar=c(1,0.4),10)
pacf(arima.sim(list(ar=(0.1,0.2)),100))
pacf(arima.sim(list(ar=c(0.1,0.2)), 100))
pacf(arima.sim(list(ar=c(0.1,0.2)), 100))
pacf(arima.sim(list(ar=c(0.1,0.2)), 100))
pacf(arima.sim(list(ar=c(0.1,0.2)), 100))
pacf(arima.sim(list(ar=c(0.1,0.2)), 100))
pacf(arima.sim(list(ar=c(0.1,0.2)), 100))
pacf(arima.sim(list(ar=c(0.1,0.2)), 100))
pacf(arima.sim(list(ar=c(1.5,-0.75,-0.1)), 100))
pacf(arima.sim(list(ar=c(1.5,-0.75,-0.1)), 100))
pacf(arima.sim(list(ar=c(1.5,-0.75,-0.1)), 100))
pacf(arima.sim(list(ar=c(1.5,-0.75,-0.1)), 1000))
pacf(arima.sim(list(ar=c(1.5,-0.75,-0.1)), 1000))
pacf(arima.sim(list(ar=c(1.5,-0.75,-0.1)), 1000))
pacf(arima.sim(list(ar=c(1.5,-0.75,-0.1)), 1000))
pacf(arima.sim(list(ar=c(1.5,-0.75,-0.1)), 1000))
pacf(arima.sim(list(ar=c(1.5,-0.75,-0.1)), 1000))
pacf(arima.sim(list(ma=c(1.5,-0.75,-0.1)), 1000))
pacf(arima.sim(list(ma=c(1.5,-0.75,-0.1)), 1000))
pacf(arima.sim(list(ma=c(1.5,-0.75,-0.1)), 1000))
pacf(arima.sim(list(ma=c(1.5,-0.75,-0.1)), 1000))
acf2(arima.sim(list(ma=c(1.5,-0.75,-0.1)), 1000))
library(forecast)
library(kernlab)
acf2
library(astsa)
library(forecast)
library(TSA)
library(tseries)
?acf2
acf2(arima.sim(list(ma=c(1.5,-0.75,-0.1)), 1000))
acf2(arima.sim(list(ar=c(1.5,-0.75,-0.1)), 1000))
acf2(arima.sim(list(ma=c(1.5,-0.75,-0.1)), 1000))
aa <-arima.sim(list(ar=c(1.5,-0.75,-0.1)), 1000)
sarima(aa,3,0,0)
bb <-arima.sim(list(ma=c(1.5,-0.75,-0.1)), 1000)
sarima(bb,0,0,3)
sarima(bb,3,0,0)
auto.arima(bb)
auto.arima(bb)
auto.arima(bb)
auto.arima(aa)
?ksmooth
?Ksmooth2
?arima.sim
a <- arima.sim(list(ar=c(0,0,0,0,0,0,0,0,0,0,0,0.8),ma=c(-0.5)),1000)
a
plot(a)
a <- arima.sim(list(ar=c(0,0,0,0,0,0,0,0,0,0,0,0.8),ma=c(-0.5)),100)
plot(a)
acf2(a)
a <- arima.sim(list(ar=c(0,0,0,0,0,0,0,0,0,0,0,0.8),ma=c(-0.5)),500)
acf2(a)
b <- lag(a,12)
plot(a)
plot(b)
plot(b)
acf2(b)
acf2(a)
b <- lag(a,-12)
plot(b)
plot(a)
plot(b)
b <- diff(a,lag = 12)
plot(b)
plot(a)
acf2(b)
acf2(a)
sarima(a)
sarima(a,1,0,2)
acf(a)
sarima(b,1,0,2)
sarima(a,1,0,2)
sarima(a,1,0,2,S=12)
sarima(a,0,0,2,P=1,S=12)
sarima(b,0,0,2,P=1,S=12)
sarima(a,0,0,2,P=1,S=12)
auto.arima(b)
auto.arima(b)
auto.arima(a)
eacf
eacf(a)
eacf(b)
acf2(b)
